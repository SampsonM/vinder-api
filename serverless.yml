# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: vinder-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  role: arn:aws:iam::344615800739:role/lambda-vpc-execution-role

# you can overwrite defaults here
#  stage: dev
  region: eu-west-2
  vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
    securityGroupIds:
      - sg-02e14cdd9f57775ca
    subnetIds:
      - subnet-0629fc901acd90083
      - subnet-075af0bc267c0a2ec

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::vinder-photos/uploads"
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
environment:
   API_KEY: "${self:custom.secrets.API_KEY}"
   API_SECRET: "${self:custom.secrets.API_SECRET}"
   COMMON_API_KEY: "${self:custom.secrets.COMMON_API_KEY}"
   COMMON_API_SECRET: "${self:custom.secrets.COMMON_API_SECRET}"

# you can add packaging information here
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
   exclude:
     - secrets.yml
custom:
  stage: ${opt:stage,self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}

functions:
  getRestaurants:
    handler: handler.getRestaurants
    timeout: 30
    events:
     - http:
         path: restaurants
         method: get
  addNewUser:
    handler: handler.addNewUser
    timeout: 30
    events:
     - http:
         path: user
         method: post
  addDishToRestaurant:
    handler: handler.addDishToRestaurant
    timeout: 30
    events: 
     - http:
         path: dish
         method: post
  addCommentToDish:
    handler: handler.addCommentToDish
    timeout: 30
    events: 
     - http:
         path: comment
         method: post
  getUsers:
    handler: handler.getUsers
    timeout: 30
    events:
     - http:
         path: users
         method: get
  getRestaurantById:
    handler: handler.getRestaurantById
    timeout: 30
    events:
     - http:
         path: restaurant/{id}
         method: get
         request:
           parameters:
             paths:
               id: true
  getUserById:
    handler: handler.getUserById
    timeout: 30
    events:
     - http:
         path: user/{id}
         method: get
         request:
           parameters:
             paths:
               id: true
  getRestaurantsByArea:
    handler: handler.getRestaurantsByArea
    timeout: 30
    events:
     - http:
         path: restaurants/{area}
         method: get
         request:
           parameters:
             paths:
               area: true
  getDishByRestaurantId:
    handler: handler.getDishByRestaurantId
    timeout: 30
    events:
     - http:
         path: restaurants/dish/{id}
         method: get
         request:
           parameters:
             paths:
               id: true
  getCommentsByDishId:
    handler: handler.getCommentsByDishId
    timeout: 30
    events:
     - http:
         path: restaurants/dish/comments/{id}
         method: get
         request:
           parameters:
             paths:
               id: true
  getComments:
    handler: handler.getComments
    timeout: 30
    events:
     - http:
         path: comments
         method: get
  getDishes:
    handler: handler.getDishes
    timeout: 30
    events:
     - http:
         path: dishes
         method: get
  uploadImage:
    handler: handler.uploadImage
    timeout: 30
    events:
      - http:
          path: image
          method: post
          cors: true
     